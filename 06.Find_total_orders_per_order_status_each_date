#Find total orders per order status for each date/month

#Transformations used in this use-case: Map, Join, ReduceByKey, SortByKey
#Actions used in this use-case: Collect, ForEach

####################### Using scala #############################################
val ordersRDD = sc.textFile("/home/cloudera/orders.txt")
val orderItemsRDD = sc.textFile("/home/cloudera/order_items.txt")

#If we need to find the total orders per order status for each month, just add substring method & extract yyyy-mm
#val ordersMap = ordersRDD.map(x => x.split(",")).map(x => (x(0).toInt, (x(1).substring(0, 7), x(3))))
val ordersMap = ordersRDD.map(x => x.split(",")).map(x => (x(0).toInt, (x(1), x(3))))
val orderItemsMap = orderItemsRDD.map(x => x.split(",")).map(x => (x(1).toInt, x(2).toInt))

val ordersJoinedMap = orderItemsMap.join(ordersMap)

val ordersStatusMap = ordersJoinedMap.map(x => ((x._2._2._1, x._2._2._2), 1))

val ordersStatusAggregated = ordersStatusMap.reduceByKey(_ + _).sortByKey()

ordersStatusAggregated.collect.foreach(println)

####################### Using spark-sql (SQLContext) ############################
import org.apache.spark.sql.{SQLContext, Row}

val sqlContext = new SQLContext(sc)

sqlContext.sql("set spark.sql.shuffle.partitions=10")

case class Orders(order_id: Int, order_date: String, order_status: String)

case class OrderItems(order_item_order_id: Int, order_item_subtotal: Float)

val ordersMap = sc.textFile("/home/cloudera/orders.txt").map(x => x.split(",")).map(x => Orders(x(0).toInt, x(1), x(3)))

val orderItemsMap = sc.textFile("/home/cloudera/order_items.txt").map(x => x.split(",")).map(x => OrderItems(x(1).toInt, x(4).toFloat))

import sqlContext.createSchemaRDD

ordersMap.registerTempTable("OrdersTbl")

orderItemsMap.registerTempTable("OrderItemsTbl")

val totalOrdersPerOrderStatusPerDate = sqlContext.sql("select o.order_date, o.order_status, count(1) from OrdersTbl o join OrderItemsTbl oi on o.order_id=oi.order_item_order_id group by o.order_date, o.order_status order by o.order_date, o.order_status")

totalOrdersPerOrderStatusPerDate.collect.foreach(println)

####################### Using Hive (HiveContext) ####################################
#Pre-requisites: Table must be exists in Hive
import org.apache.spark.sql.hive.HiveContext

val sqlContext = new HiveContext(sc)

sqlContext.sql("set spark.sql.shuffle.partitions=10")

sqlContext.sql("use retail_db")

val totalOrdersPerOrderStatusPerDate = sqlContext.sql("select o.order_date, o.order_status, count(1) from orders o join order_items oi on o.order_id=oi.order_item_order_id group by o.order_date, o.order_status order by o.order_date, o.order_status")

totalOrdersPerOrderStatusPerDate.collect.foreach(println)

#Validation Script (Using Sqoop Eval)
sqoop eval \
--connect jdbc:mysql://quickstart.cloudera:3306/retail_db \
--username retail_dba \
--password cloudera \
--query "select o.order_date, o.order_status, count(1) from orders o join order_items oi on o.order_id=oi.order_item_order_id group by o.order_date, o.order_status order by o.order_date, o.order_status"
